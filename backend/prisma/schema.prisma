generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  name            String
  role            Role             @default(STAFF)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  incomingLetters IncomingLetter[]
  outgoingLetters OutgoingLetter[]

  @@map("users")
}

model IncomingLetter {
  id            String        @id @default(cuid())
  letterNumber  String        @unique
  subject       String
  sender        String
  receivedDate  DateTime
  fileName      String?
  filePath      String?
  isInvitation  Boolean       @default(false)
  eventDate     DateTime?
  eventLocation String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  eventNotes    String?
  eventTime     String?
  letterDate    DateTime?
  letterNature  LetterNature  @default(BIASA)
  note          String?
  processor     String
  recipient     String
  dispositions  Disposition[]
  user          User          @relation(fields: [userId], references: [id])

  @@map("incoming_letters")
}

model OutgoingLetter {
  id                 String        @id @default(cuid())
  letterNumber       String        @unique
  subject            String
  recipient          String
  fileName           String?
  filePath           String?
  isInvitation       Boolean       @default(false)
  eventDate          DateTime?
  eventLocation      String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  userId             String
  classificationCode String?
  createdDate        DateTime
  eventNotes         String?
  eventTime          String?
  executionDate      DateTime?
  letterDate         DateTime
  letterNature       LetterNature  @default(BIASA)
  note               String?
  processor          String
  securityClass      SecurityClass @default(BIASA)
  sender             String
  serialNumber       Int?
  user               User          @relation(fields: [userId], references: [id])

  @@map("outgoing_letters")
}

model Disposition {
  id               String          @id @default(cuid())
  incomingLetterId String
  dispositionTo    DispositionType
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  incomingLetter   IncomingLetter  @relation(fields: [incomingLetterId], references: [id], onDelete: Cascade)

  @@map("dispositions")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  userId    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

enum Role {
  ADMIN
  STAFF
}

enum LetterNature {
  BIASA
  TERBATAS
  RAHASIA
  SANGAT_RAHASIA
  PENTING
}

enum SecurityClass {
  BIASA
}

enum DispositionType {
  UMPEG
  PERENCANAAN
  KAUR_KEUANGAN
  KABID
  BIDANG1
  BIDANG2
  BIDANG3
  BIDANG4
  BIDANG5
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}
