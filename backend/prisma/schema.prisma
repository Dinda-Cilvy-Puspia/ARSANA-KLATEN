// Mendefinisikan generator untuk Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Mendefinisikan koneksi ke database PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// MODEL-MODEL UTAMA
// =====================================

model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  role                Role             @default(STAFF)

  // Relasi
  incomingLetters     IncomingLetter[]
  outgoingLetters     OutgoingLetter[]
  createdDispositions Disposition[]    @relation("DispositionCreatedBy")

  // Timestamps
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@map("users")
}

model IncomingLetter {
  id                         String             @id @default(cuid())
  letterNumber               String             @unique
  subject                    String
  sender                     String
  recipient                  String
  processor                  String
  receivedDate               DateTime
  letterDate                 DateTime?
  note                       String?
  fileName                   String?
  filePath                   String?
  isInvitation               Boolean            @default(false)
  needsFollowUp              Boolean            @default(false)
  followUpDeadline           DateTime?
  eventDate                  DateTime?
  eventTime                  String?
  eventLocation              String?
  eventNotes                 String?
  srikandiDispositionNumber  String?
  dispositionTarget          String
  overdueNotifiedAt          DateTime?          // ✅ TAMBAHKAN FIELD INI
  letterNature               LetterNature       @default(BIASA)
  dispositionMethod          DispositionMethod? /// Manual atau Srikandi

  // Relasi
  userId                     String
  user                       User               @relation(fields: [userId], references: [id])
  dispositions               Disposition[]

  // Timestamps
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt

  // Indeks untuk optimasi query
  @@index([userId])
  @@index([receivedDate])
  @@index([letterNature])
  @@map("incoming_letters")
}

model OutgoingLetter {
  id                         String             @id @default(cuid())
  letterNumber               String             @unique
  subject                    String
  sender                     String
  recipient                  String
  processor                  String
  createdDate                DateTime
  letterDate                 DateTime
  executionDate              DateTime?
  note                       String?
  fileName                   String?
  filePath                   String?
  isInvitation               Boolean            @default(false)
  eventDate                  DateTime?
  eventTime                  String?
  eventLocation              String?
  eventNotes                 String?
  serialNumber               Int?
  classificationCode         String?
  srikandiDispositionNumber  String?
  overdueNotifiedAt          DateTime?          // ✅ TAMBAHKAN FIELD INI
  letterNature               LetterNature       @default(BIASA)
  securityClass              SecurityClass      @default(BIASA)
  dispositionMethod          DispositionMethod? /// Manual atau Srikandi

  // Relasi
  userId                     String
  user                       User               @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt

  // Indeks untuk optimasi query
  @@index([userId])
  @@index([createdDate])
  @@map("outgoing_letters")
}

model Disposition {
  id                 String          @id @default(cuid())
  notes              String?
  dispositionTo      DispositionType

  // Relasi
  incomingLetterId   String
  incomingLetter     IncomingLetter  @relation(fields: [incomingLetterId], references: [id], onDelete: Cascade)
  createdById        String?
  createdBy          User?           @relation("DispositionCreatedBy", fields: [createdById], references: [id])

  // Timestamps
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Indeks untuk optimasi query
  @@index([incomingLetterId])
  @@index([createdById])
  @@map("dispositions")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  isRead    Boolean          @default(false)
  type      NotificationType @default(INFO)

  // Relasi
  userId    String?          // Bisa null untuk notifikasi global

  // Timestamps
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Indeks untuk optimasi query
  @@index([userId])
  @@map("notifications")
}


// =====================================
// ENUMERASI
// =====================================

enum Role {
  ADMIN
  STAFF
}

enum LetterNature {
  BIASA
  TERBATAS
  RAHASIA
  SANGAT_RAHASIA
  PENTING
}

enum SecurityClass {
  BIASA
}

enum DispositionMethod {
  MANUAL
  SRIKANDI
}

enum DispositionType {
  UMPEG
  PERENCANAAN
  KAUR_KEUANGAN
  KABID
  BIDANG1
  BIDANG2
  BIDANG3
  BIDANG4
  BIDANG5
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}